┌─(simon@bumped)-(~/repositories/git/github/meiersi/blaze-builder)-(master +?)                                                                                                                         
└─╼ make utf8-io                                                                                                                                                                                       
ghc-7.0.2 --make -O2 -fforce-recomp -main-is Utf8IO benchmarks/Utf8IO.hs                                                                                                                               
[ 1 of 10] Compiling Blaze.ByteString.Builder.Internal.UncheckedShifts ( Blaze/ByteString/Builder/Internal/UncheckedShifts.hs, Blaze/ByteString/Builder/Internal/UncheckedShifts.o )                   
[ 2 of 10] Compiling Blaze.ByteString.Builder.Internal.Types ( Blaze/ByteString/Builder/Internal/Types.hs, Blaze/ByteString/Builder/Internal/Types.o )                                                 
[ 3 of 10] Compiling Blaze.ByteString.Builder.Internal.Write ( Blaze/ByteString/Builder/Internal/Write.hs, Blaze/ByteString/Builder/Internal/Write.o )                                                 
[ 4 of 10] Compiling Blaze.ByteString.Builder.Internal ( Blaze/ByteString/Builder/Internal.hs, Blaze/ByteString/Builder/Internal.o )                                                                   
[ 5 of 10] Compiling Blaze.ByteString.Builder.Char.Utf8 ( Blaze/ByteString/Builder/Char/Utf8.hs, Blaze/ByteString/Builder/Char/Utf8.o )                                                                
[ 6 of 10] Compiling Blaze.ByteString.Builder.Word ( Blaze/ByteString/Builder/Word.hs, Blaze/ByteString/Builder/Word.o )                                                                               
[ 7 of 10] Compiling Blaze.ByteString.Builder.Int ( Blaze/ByteString/Builder/Int.hs, Blaze/ByteString/Builder/Int.o )                                                                                  
[ 8 of 10] Compiling Blaze.ByteString.Builder.ByteString ( Blaze/ByteString/Builder/ByteString.hs, Blaze/ByteString/Builder/ByteString.o )                                                             
[ 9 of 10] Compiling Blaze.ByteString.Builder ( Blaze/ByteString/Builder.hs, Blaze/ByteString/Builder.o )                                                                                              
[10 of 10] Compiling Utf8IO           ( benchmarks/Utf8IO.hs, benchmarks/Utf8IO.o )                                                                                                                    
Linking benchmarks/Utf8IO ...                                                                                                                                                                          
time ./benchmarks/Utf8IO via-text    100000000 /dev/null                                                                                                                                               
via-text: 5.978718s                                                                                                                                                                                    
5.95user 0.02system 0:05.98elapsed 99%CPU (0avgtext+0avgdata 18704maxresident)k                                                                                                                        
0inputs+0outputs (0major+1239minor)pagefaults 0swaps                                                                                                                                                   
time ./benchmarks/Utf8IO text        100000000 /dev/null                                                                                                                                               
text: 1.081576s                                                                                                                                                                                        
5.75user 0.22system 0:05.97elapsed 99%CPU (0avgtext+0avgdata 815712maxresident)k                                                                                                                       
0inputs+0outputs (0major+51052minor)pagefaults 0swaps                                                                                                                                                  
time ./benchmarks/Utf8IO blaze       100000000 /dev/null                                                                                                                                               
blaze: 1.702032s                                                                                                                                                                                       
1.69user 0.00system 0:01.70elapsed 100%CPU (0avgtext+0avgdata 16416maxresident)k                                                                                                                       
0inputs+0outputs (0major+1094minor)pagefaults 0swaps                                                                                                                                                   
time ./benchmarks/Utf8IO base        100000000 /dev/null                                                                                                                                               
base: 2.636096s                                                                                                                                                                                        
2.61user 0.02system 0:02.63elapsed 99%CPU (0avgtext+0avgdata 11664maxresident)k                                                                                                                        
0inputs+0outputs (0major+797minor)pagefaults 0swaps                                                                                                                                                    
time ./benchmarks/Utf8IO utf8-light  100000000 /dev/null                                                                                                                                               
utf8-light: 40.186569s
37.77user 2.39system 0:40.20elapsed 99%CPU (0avgtext+0avgdata 841296maxresident)k
0inputs+0outputs (0major+574677minor)pagefaults 0swaps
time ./benchmarks/Utf8IO utf8-string 100000000 /dev/null
utf8-string: 47.991854s
47.75user 0.19system 0:47.99elapsed 99%CPU (0avgtext+0avgdata 26816maxresident)k
0inputs+0outputs (0major+1744minor)pagefaults 0swaps


Efficient UTF-8 Encoding

Belgien beer and UTF-8 encoding: what a coincidence. Well, this post is just a
quick post about the results for UTF-8 encoding 100'000'000 characters to /dev/null
using the various options that our current Haskell ecosystem offers. It happens
to be written after a very nice Belgian evening spent in the awesome Minimum
climbing gym in Zurich Wollishofen. Here's the code and here are the results obtained
on my Core 2 Duo laptop with 2GB RAM using GHC 7.0.2 on a 32bit Linux 2.6.32-29.

text 1.081576s                                                                                                                                                                                        
blaze 1.702032s                                                                                                                                                                                       
base 2.636096s                                                                                                                                                                                        
via-text 5.978718s                                                                                                                                                                                    
utf8-string 47.991854s
utf8-light 40.186569s

The result for text is the time it takes to UTF-8 encode a nicely packed lazy text 
value of length 100'000'000. The other times for blaze, base, via-text, and
utf8-string measure how long it takes to UTF-8 encode a String of length 100'000'000
using blaze-builder, GHC 7.0.2's base library, packing to a lazy text value and
encoding it, and using the utf8-string library. Sadly, utf8-light supports only
strict ByteStrings and, hence, it's not really usable to UTF-8 encode a String that
long. Therefore, the time given is the time it takes to encode a String of
length 1'000'000 a hundred times.

My conclusions after this experiment are the following:
1. Using [Word8] list based encoding implementations is likely to result in suboptimal performance.
2. It is not worth packing a String first to a Text value, if it is encoded right away again.
3. The current work I'm spending on integrating blaze-builder with the bytestring library is
   really worth the effort. Moreover, it might even be worth a try to replace
   the String encoding functions in the base library by according Builders to gain these
   additional 50 percent of speed.
4. It would be very interesting to see how well we fare against other languages. If a reader
   would implement the same benchmark in C, C++, Java, Python, ... I'd be very
   glad to publish his results here.



